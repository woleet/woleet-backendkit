/**
 * Woleet backend kit API
 * The Woleet backend kit API, as exposed by Woleet backend kit's NodeJS server, allows:  - **your backend** (and only yours) to sign some data using its bitcoin identity (as generated during backend kit installation)  - **anyone** to verify that your backend effectively owns its claimed bitcoin address 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/ErrorError', 'model/IdentityResult', 'model/SignatureResult', 'api/IdentityApi', 'api/SignatureApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Error'), require('./model/ErrorError'), require('./model/IdentityResult'), require('./model/SignatureResult'), require('./api/IdentityApi'), require('./api/SignatureApi'));
  }
}(function(ApiClient, Error, ErrorError, IdentityResult, SignatureResult, IdentityApi, SignatureApi) {
  'use strict';

  /**
   * The_Woleet_backend_kit_API_as_exposed_by_Woleet_backend_kits_NodeJS_server_allows___your_backend__and_only_yours_to_sign_some_data_using_its_bitcoin_identity__as_generated_during_backend_kit_installation___anyone_to_verify_that_your_backend_effectively_owns_its_claimed_bitcoin_address.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var WoleetBackendKitApi = require('index'); // See note below*.
   * var xxxSvc = new WoleetBackendKitApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new WoleetBackendKitApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new WoleetBackendKitApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new WoleetBackendKitApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The ErrorError model constructor.
     * @property {module:model/ErrorError}
     */
    ErrorError: ErrorError,
    /**
     * The IdentityResult model constructor.
     * @property {module:model/IdentityResult}
     */
    IdentityResult: IdentityResult,
    /**
     * The SignatureResult model constructor.
     * @property {module:model/SignatureResult}
     */
    SignatureResult: SignatureResult,
    /**
     * The IdentityApi service constructor.
     * @property {module:api/IdentityApi}
     */
    IdentityApi: IdentityApi,
    /**
     * The SignatureApi service constructor.
     * @property {module:api/SignatureApi}
     */
    SignatureApi: SignatureApi
  };

  return exports;
}));
