/**
 * Woleet backend kit API
 * The Woleet backend kit API, as exposed by Woleet backend kit's NodeJS server, allows:  - **your backend** (and only yours) to sign some data using its bitcoin identity (as generated during backend kit installation)  - **anyone** to verify that your backend effectively owns its claimed bitcoin address 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetBackendKitApi) {
      root.WoleetBackendKitApi = {};
    }
    root.WoleetBackendKitApi.ErrorError = factory(root.WoleetBackendKitApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ErrorError model module.
   * @module model/ErrorError
   * @version 1.0.0
   */

  /**
   * Constructs a new <code>ErrorError</code>.
   * @alias module:model/ErrorError
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>ErrorError</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ErrorError} obj Optional instance to populate.
   * @return {module:model/ErrorError} The populated <code>ErrorError</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('statusCode')) {
        obj['statusCode'] = ApiClient.convertToType(data['statusCode'], 'Number');
      }
      if (data.hasOwnProperty('message')) {
        obj['message'] = ApiClient.convertToType(data['message'], 'String');
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * the statusCode matches the returned http status code
   * @member {Number} statusCode
   */
  exports.prototype['statusCode'] = undefined;
  /**
   * @member {module:model/ErrorError.MessageEnum} message
   */
  exports.prototype['message'] = undefined;
  /**
   * @member {module:model/ErrorError.TypeEnum} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>message</code> property.
   * @enum {String}
   * @readonly
   */
  exports.MessageEnum = {
    /**
     * value: "Bad Request"
     * @const
     */
    "Bad Request": "Bad Request",
    /**
     * value: "Unauthorized"
     * @const
     */
    "Unauthorized": "Unauthorized",
    /**
     * value: "Not Found"
     * @const
     */
    "Not Found": "Not Found",
    /**
     * value: "Internal Server Error"
     * @const
     */
    "Internal Server Error": "Internal Server Error",
    /**
     * value: "Missing 'pubKey' query parameter"
     * @const
     */
    "Missing &#39;pubKey&#39; query parameter": "Missing 'pubKey' query parameter",
    /**
     * value: "Missing 'leftData' query parameter"
     * @const
     */
    "Missing &#39;leftData&#39; query parameter": "Missing 'leftData' query parameter",
    /**
     * value: "Missing 'hashToSign' query parameter"
     * @const
     */
    "Missing &#39;hashToSign&#39; query parameter": "Missing 'hashToSign' query parameter",
    /**
     * value: "Query parameter 'hashToSign' has to be a SHA256 hash (in lowercase)"
     * @const
     */
    "Query parameter &#39;hashToSign&#39; has to be a SHA256 hash (in lowercase)": "Query parameter 'hashToSign' has to be a SHA256 hash (in lowercase)",
    /**
     * value: "Unhandled public key"
     * @const
     */
    "Unhandled public key": "Unhandled public key",
    /**
     * value: "Bad token"
     * @const
     */
    "Bad token": "Bad token"  };

  /**
   * Allowed values for the <code>type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TypeEnum = {
    /**
     * value: "BadRequestError"
     * @const
     */
    "BadRequestError": "BadRequestError",
    /**
     * value: "UnauthorizedError"
     * @const
     */
    "UnauthorizedError": "UnauthorizedError",
    /**
     * value: "NotFoundError"
     * @const
     */
    "NotFoundError": "NotFoundError",
    /**
     * value: "InternalServerError"
     * @const
     */
    "InternalServerError": "InternalServerError"  };


  return exports;
}));


