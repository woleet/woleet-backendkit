/**
 * Woleet backend kit API
 * The Woleet backend kit API, as exposed by Woleet backend kit's NodeJS server, allows:  - **your backend** (and only yours) to sign some data using its bitcoin identity (as generated during backend kit installation)  - **anyone** to verify that your backend effectively owns its claimed bitcoin address 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/IdentityResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/IdentityResult'));
  } else {
    // Browser globals (root is window)
    if (!root.WoleetBackendKitApi) {
      root.WoleetBackendKitApi = {};
    }
    root.WoleetBackendKitApi.IdentityApi = factory(root.WoleetBackendKitApi.ApiClient, root.WoleetBackendKitApi.Error, root.WoleetBackendKitApi.IdentityResult);
  }
}(this, function(ApiClient, Error, IdentityResult) {
  'use strict';

  /**
   * Identity service.
   * @module api/IdentityApi
   * @version 1.0.0
   */

  /**
   * Constructs a new IdentityApi. 
   * @alias module:api/IdentityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the identity operation.
     * @callback module:api/IdentityApi~identityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Prove the bitcoin identity of your backend.
     * This endpoint can be used by anyone wanting to verify the bitcoin identity of your backend.   Calling this endpoint (that should be accessible publicly) makes your backend sign some random data (built by concatenating the &#x60;leftData&#x60; parameter provided by the client and the &#x60;rightData&#x60; parameter provided by your backend) using the bitcoin address provided in the &#x60;pubKey&#x60; parameter.   The caller can then verify that the produced signature is valid for the given bitcoin address (which validate the ownership of this address by your backend) and can optionally read the TLS certificate securing this endpoint to get the certified identity of your backend. 
     * @param {String} pubKey The bitcoin address to use to sign.
     * @param {String} leftData Left part of the random data to sign (should be generated randomly).
     * @param {module:api/IdentityApi~identityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityResult}
     */
    this.identity = function(pubKey, leftData, callback) {
      var postBody = null;

      // verify the required parameter 'pubKey' is set
      if (pubKey === undefined || pubKey === null) {
        throw new Error("Missing the required parameter 'pubKey' when calling identity");
      }

      // verify the required parameter 'leftData' is set
      if (leftData === undefined || leftData === null) {
        throw new Error("Missing the required parameter 'leftData' when calling identity");
      }


      var pathParams = {
      };
      var queryParams = {
        'pubKey': pubKey,
        'leftData': leftData
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = IdentityResult;

      return this.apiClient.callApi(
        '/identity', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
