/**
 * Woleet signature backend kit
 * This server aims to provide an easy way to sign a hash and proving that you are the corresponding signee on demand by providing two endpoints:    `/identity` let **anyone** verify that you own the private key corresponding to your address.    `/signature` let **you** (and only you) sign a hash.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.WoleetSignatureBackendKit);
    }
}(this, function (expect, WoleetSignatureBackendKit) {
    'use strict';

    let signature200;
    let api;

    const {validateSignature, validateIdentity, isHex, isBase64} = require('../../../util');
    const assert = require('assert');

    const query = {
        pubKey: '1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzN',
        hashToSign: '2224fa760fe5b392a8de47b3e889b10446e9cb99cce09f8849c9a8f29186f303'
    };

    beforeEach(function () {
        api = new WoleetSignatureBackendKit.DefaultApi();
    });

    beforeEach(function () {
        signature200 = new WoleetSignatureBackendKit.InlineResponse200();
    });

    describe('Signature200', function () {
        it('should create an instance of InlineResponse200', function () {
            expect(signature200).to.be.a(WoleetSignatureBackendKit.InlineResponse200);
        });

        const TOKEN = '123456';

        it('should have the property pubKey (base name: "pubKey")', function (done) {
            api.signatureGet(query.hashToSign, {pubKey: query.pubKey}, TOKEN, function (error, response) {
                if (error) return done(error);
                const instance = new WoleetSignatureBackendKit.InlineResponse200.constructFromObject(response);
                assert(instance.pubKey);
                assert.equal(instance.pubKey, query.pubKey);
                done();
            });
        });

        it('should have the property signedHash (base name: "signedHash")', function (done) {
            api.signatureGet(query.hashToSign, {pubKey: query.pubKey}, TOKEN, function (error, response) {
                if (error) return done(error);
                const instance = new WoleetSignatureBackendKit.InlineResponse200.constructFromObject(response);
                assert(instance.signedHash);
                assert(isHex(instance.signedHash));
                assert.equal(instance.signedHash, query.hashToSign);
                done();
            });
        });

        it('should have the property signature (base name: "signature")', function (done) {
            api.signatureGet(query.hashToSign, {pubKey: query.pubKey}, TOKEN, function (error, response) {
                if (error) return done(error);
                const instance = new WoleetSignatureBackendKit.InlineResponse200.constructFromObject(response);
                assert(isBase64(instance.signature));
                assert(instance.signature);
                assert(validateSignature(query.hashToSign, query.pubKey, instance.signature).valid === true);
                done();
            });
        });

        it('should have the property identityURL (base name: "identityURL")', function (done) {
            api.signatureGet(query.hashToSign, {pubKey: query.pubKey}, TOKEN, function (error, response) {
                if (error) return done(error);
                const instance = new WoleetSignatureBackendKit.InlineResponse200.constructFromObject(response);
                assert(instance.identityURL);
                assert.equal(instance.identityURL, 'https://localhost:1234/identity');
                done();
            });
        });

    });

}));
