/**
 * Woleet signature backend kit
 * This server aims to provide an easy way to sign a hash and proving that you are the corresponding signee on demand by providing two endpoints:    `/identity` let **anyone** verify that you own the private key corresponding to your address.    `/signature` let **you** (and only you) sign a hash.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD.
        define(['expect.js', '../../src/index'], factory);
    } else if (typeof module === 'object' && module.exports) {
        // CommonJS-like environments that support module.exports, like Node.
        factory(require('expect.js'), require('../../src/index'));
    } else {
        // Browser globals (root is window)
        factory(root.expect, root.WoleetSignatureBackendKit);
    }
}(this, function (expect, WoleetSignatureBackendKit) {
    'use strict';

    let err400;
    let api;

    const {validateSignature, validateIdentity, isHex, isBase64} = require('../../../util');
    const assert = require('assert');

    const query = {
        pubKey: '1HZwkjkeaoZfTSaJxDw6aKkxp45agDiEzN',
        leftData: '5qse4648e536rse5bg9487sef684sz'
    };

    beforeEach(function () {
        api = new WoleetSignatureBackendKit.DefaultApi();
    });

    beforeEach(function () {
        err400 = new WoleetSignatureBackendKit.InlineResponse400();
    });

    describe('InlineResponse400', function () {
        it('should create an instance of InlineResponse400', function (done) {
            // uncomment below and update the code to test InlineResponse400
            api.identityGet('invalid-pubkey', query.leftData, function (error, response) {
                assert(!response);
                let instance = WoleetSignatureBackendKit.InlineResponse400.constructFromObject(JSON.parse(error.response.text));
                expect(instance).to.be.a(WoleetSignatureBackendKit.InlineResponse400);
                assert(instance.error);
                assert(instance.error.type);
                assert(instance.error.message);
                assert(instance.error.statusCode);
                assert.equal(instance.error.statusCode, 400);
                assert.equal(error.status, 400);
                done();
            });
        });

        it('should have the property error (base name: "error")', function (done) {
            // uncomment below and update the code to test the property error
            api.identityGet('invalid-pubkey', query.leftData, function (error, response) {
                assert(!response);
                let instance = WoleetSignatureBackendKit.InlineResponse400.constructFromObject(JSON.parse(error.response.text));
                expect(instance).to.be.a(WoleetSignatureBackendKit.InlineResponse400);
                assert(instance.error);
                done();
            });
        });

    });

}));
